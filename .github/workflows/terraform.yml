name: Terraform PR Flow

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
      - labeled
      - unlabeled
      - submitted

permissions:
  id-token: write
  contents: write
  pull-requests: write

concurrency:
  group: terraform-pr-${{ github.event.pull_request.number }}
  cancel-in-progress: false

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      tf_env: ${{ steps.detect.outputs.tf_env }}
    steps:
      - name: Select deployment environment from labels
        id: detect
        uses: actions/github-script@v6
        with:
          script: |
            const allowed = ['dev', 'test', 'prod'];
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            const labels = await github.paginate(
              github.rest.issues.listLabelsOnIssue,
              { owner, repo, issue_number: prNumber }
            );

            const match = labels
              .map(label => label.name.toLowerCase())
              .find(name => name.startsWith('env:') || name.startsWith('environment:'));

            if (!match) {
              core.setFailed(`Add a label such as 'env:dev', 'env:test', or 'env:prod' to choose the deployment environment for PR #${prNumber}.`);
              return;
            }

            const tfEnv = match.split(':')[1].trim();

            if (!allowed.includes(tfEnv)) {
              core.setFailed(`Label '${match}' is not a supported environment. Allowed: ${allowed.join(', ')}.`);
              return;
            }

            core.setOutput('tf_env', tfEnv);

  validate_and_plan:
    name: Validate & Plan
    needs: determine-environment
    if: github.event_name == 'pull_request_target' && github.event.action != 'submitted'
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.tf_env }}
    outputs:
      plan_exit: ${{ steps.plan.outputs.exit_code }}
    env:
      TF_ENV: ${{ needs.determine-environment.outputs.tf_env }}
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Ensure PR originates from this repository
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "Fork-based pull requests are not supported by this workflow."
            exit 1
          fi

      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init (no backend)
        run: terraform init -backend=false

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          set -o pipefail
          VAR_FILE="environments/${TF_ENV}/terraform.tfvars"
          terraform plan -refresh=false -detailed-exitcode -no-color -var-file="$VAR_FILE" | tee plan.out
          code=$?
          if [ $code -eq 1 ]; then
            echo "Plan failed."
            exit 1
          fi
          echo "exit_code=$code" >> "$GITHUB_OUTPUT"

      - name: Comment plan on PR
        uses: actions/github-script@v6
        env:
          TF_ENV: ${{ env.TF_ENV }}
          PLAN_EXIT: ${{ steps.plan.outputs.exit_code }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.existsSync('plan.out') ? fs.readFileSync('plan.out', 'utf8') : 'No plan output.';
            const exitCode = Number(process.env.PLAN_EXIT || 0);
            const status = exitCode === 0 ? '✅ No changes detected.' : '⚠️ Changes pending apply.';
            const body = [
              `### Terraform plan (${process.env.TF_ENV})`,
              status,
              '<details><summary>Show Plan</summary>',
              '',
              '```',
              plan,
              '```',
              '</details>'
            ].join('\n');

            const marker = '### Terraform plan';
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.paginate(
              github.rest.issues.listComments,
              { owner, repo, issue_number }
            );

            const previous = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.startsWith(marker)
            );

            if (previous) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: previous.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number,
                owner,
                repo,
                body
              });
            }

  plan_status:
    name: Plan Status
    needs:
      - determine-environment
      - validate_and_plan
    if: needs.validate_and_plan.result == 'success'
    runs-on: ubuntu-latest
    env:
      TF_ENV: ${{ needs.determine-environment.outputs.tf_env }}
      PLAN_EXIT: ${{ needs.validate_and_plan.outputs.plan_exit }}
    steps:
      - name: Summarize Terraform plan outcome
        run: |
          if [ -z "${PLAN_EXIT}" ]; then
            echo "Plan outcome unavailable; skipping summary." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          if [ "${PLAN_EXIT}" -eq 0 ]; then
            echo "### Terraform plan (${TF_ENV})" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "- ✅ No infrastructure changes detected." >> "$GITHUB_STEP_SUMMARY"
            echo "::notice::Terraform plan (${TF_ENV}) shows no changes."
          else
            echo "### Terraform plan (${TF_ENV})" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "- ⚠️ Changes detected. Review the PR comment for details." >> "$GITHUB_STEP_SUMMARY"
            echo "::warning::Terraform plan (${TF_ENV}) includes changes."
          fi

  apply_and_merge:
    name: Apply & Merge
    needs: determine-environment
    if: github.event_name == 'pull_request_target' && github.event.action == 'submitted' && github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.tf_env }}
    env:
      TF_ENV: ${{ needs.determine-environment.outputs.tf_env }}
      REVIEW_COMMIT: ${{ github.event.review.commit_id }}
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Ensure PR originates from this repository
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "Fork-based pull requests are not supported by this workflow."
            exit 1
          fi

      - name: Ensure review matches latest commit
        run: |
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          if [ -z "${REVIEW_COMMIT}" ]; then
            echo "Review commit id missing; aborting apply."
            exit 1
          fi
          if [ "${REVIEW_COMMIT}" != "${HEAD_SHA}" ]; then
            echo "PR has new commits (${HEAD_SHA}) since the approving review (${REVIEW_COMMIT})."
            echo "Request a fresh approval to trigger apply."
            exit 1
          fi

      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init (backend)
        env:
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_CONTAINER_NAME: ${{ secrets.AZURE_CONTAINER_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        run: |
          SA="${AZURE_STORAGE_ACCOUNT:-$STORAGE_ACCOUNT}"
          CN="${AZURE_CONTAINER_NAME:-$CONTAINER_NAME}"
          RG="${AZURE_RESOURCE_GROUP:-$RESOURCE_GROUP_NAME}"
          SUB="${AZURE_SUBSCRIPTION_ID:-$SUBSCRIPTION_ID}"
          if [ -z "${SA}" ] || [ -z "${CN}" ] || [ -z "${RG}" ] || [ -z "${SUB}" ]; then
            echo "Missing backend configuration secrets for environment '${TF_ENV}'."
            exit 1
          fi
          terraform init \
            -backend-config="storage_account_name=${SA}" \
            -backend-config="container_name=${CN}" \
            -backend-config="resource_group_name=${RG}" \
            -backend-config="subscription_id=${SUB}" \
            -backend-config="key=${TF_ENV}/terraform.tfstate"

      - name: Terraform Plan (apply run)
        id: plan_apply
        env:
          ARM_USE_OIDC: true
        run: |
          set -o pipefail
          VAR_FILE="environments/${TF_ENV}/terraform.tfvars"
          terraform plan -detailed-exitcode -out=planfile -no-color -var-file="$VAR_FILE" | tee plan.out
          code=$?
          if [ $code -eq 1 ]; then
            echo "Plan failed."
            exit 1
          fi
          echo "exit_code=$code" >> "$GITHUB_OUTPUT"

      - name: Terraform Apply
        env:
          ARM_USE_OIDC: true
        run: terraform apply -auto-approve planfile

      - name: Merge pull request
        uses: actions/github-script@v6
        env:
          PLAN_EXIT: ${{ steps.plan_apply.outputs.exit_code }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const exitCode = Number(process.env.PLAN_EXIT || 0);
            const mergeMethod = exitCode === 0 ? 'merge' : 'squash';
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: mergeMethod
            });
