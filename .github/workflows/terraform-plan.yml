name: Terraform Plan

on:
  pull_request:
    paths:
      - '**/*.tf'
      - 'environments/**'
      - '.github/workflows/terraform-plan.yml'
      - '.github/workflows/terraform-apply.yml'
  push:
    branches: [main]
    paths:
      - '**/*.tf'
      - 'environments/**'
      - '.github/workflows/terraform-plan.yml'
      - '.github/workflows/terraform-apply.yml'

permissions:
  contents: read
  id-token: write

jobs:
  plan:
    name: Plan ${{ matrix.environment }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, int, crt, prd]
    environment: ${{ matrix.environment }}
    env:
      TF_IN_AUTOMATION: true
      ARM_USE_OIDC: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Version
        run: terraform version

      - name: "DEBUG: event metadata (temporary)"
        run: |
          echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_HEAD_REF=$GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF=$GITHUB_BASE_REF"
          echo "GITHUB_EVENT_PATH=$GITHUB_EVENT_PATH"
          if [ -f "$GITHUB_EVENT_PATH" ]; then
            echo "pull_request.head.repo.full_name: $(jq -r '.pull_request.head.repo.full_name // empty' "$GITHUB_EVENT_PATH")"
            echo "pull_request.head.ref: $(jq -r '.pull_request.head.ref // empty' "$GITHUB_EVENT_PATH")"
          fi

      - name: "DEBUG: OIDC variables (temporary)"
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          echo "AZURE_FEDERATED_TOKEN_FILE=${AZURE_FEDERATED_TOKEN_FILE:-<not-set>}"
          if [ -n "${AZURE_FEDERATED_TOKEN_FILE:-}" ] && [ -f "$AZURE_FEDERATED_TOKEN_FILE" ]; then
            echo "AZURE_FEDERATED_TOKEN_FILE exists: size=$(wc -c < \"$AZURE_FEDERATED_TOKEN_FILE\") bytes"
          fi
          if [ -n "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN is set (length=$(printf '%s' \"$ACTIONS_ID_TOKEN_REQUEST_TOKEN\" | wc -c))"
          else
            echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN is not set"
          fi

      - name: "DEBUG: az CLI and OIDC env (temporary)"
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          echo "which az: $(which az || echo not-found)"
          echo "-- az --version --"
          az --version || true
          echo "-- az path listing --"
          if which az >/dev/null 2>&1; then ls -la "$(which az)" || true; fi
          echo "-- runner temp dirs --"
          ls -la /home/runner/work || true
          echo "AZURE_FEDERATED_TOKEN_FILE=${AZURE_FEDERATED_TOKEN_FILE:-<not-set>}"
          if [ -n "${AZURE_FEDERATED_TOKEN_FILE:-}" ] && [ -f "$AZURE_FEDERATED_TOKEN_FILE" ]; then
            echo "token file size: $(wc -c < \"$AZURE_FEDERATED_TOKEN_FILE\") bytes"
          fi
          if [ -n "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN is set (length=$(printf '%s' \"$ACTIONS_ID_TOKEN_REQUEST_TOKEN\" | wc -c))"
          else
            echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN is not set"
          fi
          echo "Filtered env vars:"
          env | egrep 'AZURE|ARM|ACTIONS_ID_TOKEN' || true

      - name: "DEBUG: decode GitHub ID token (temporary)"
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          echo "Requesting ID token from GitHub OIDC endpoint"
          resp=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL") || true
          idt=$(echo "$resp" | jq -r .value)
          if [ -z "$idt" ] || [ "$idt" = "null" ]; then
            echo "No id_token returned"
            echo "raw response: $resp"
            exit 0
          fi
          # decode JWT payload (no verification) and print only sub and aud
          payload=$(echo "$idt" | awk -F. '{print $2}')
          payload=$(printf '%s' "$payload" | python3 -c 'import sys,base64; p=sys.stdin.read().strip(); p+= "=" * (-len(p) % 4); print(base64.urlsafe_b64decode(p.encode()).decode())' 2>/dev/null || true)
          if [ -n "$payload" ]; then
            echo "id_token claims:"
            echo "$payload" | jq -r '.sub, .aud' || true
          else
            echo "failed to decode id_token payload"
          fi

      - name: Azure Login
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM OIDC token path
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          if [ -z "${AZURE_FEDERATED_TOKEN_FILE:-}" ]; then
            echo "AZURE_FEDERATED_TOKEN_FILE is not set after azure/login" >&2
            exit 1
          fi
          {
            echo "ARM_OIDC_TOKEN_FILE_PATH=$AZURE_FEDERATED_TOKEN_FILE"
            echo "ARM_OIDC_TOKEN_FILE=$AZURE_FEDERATED_TOKEN_FILE"
          } >> "$GITHUB_ENV"
          if [ -n "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "ARM_OIDC_TOKEN=$ACTIONS_ID_TOKEN_REQUEST_TOKEN" >> "$GITHUB_ENV"
          fi

      - name: Render backend config
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          printf '%s\n' \
            "resource_group_name  = \"${{ secrets.TF_RESOURCE_GROUP_NAME }}\"" \
            "storage_account_name = \"${{ secrets.TF_STORAGE_ACCOUNT }}\"" \
            "container_name       = \"${{ secrets.TF_CONTAINER_NAME }}\"" \
            "key                  = \"states/${{ matrix.environment }}/terraform.tfstate\"" \
          > backend.auto.tfbackend

      - name: Terraform Init
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: terraform init -backend-config=backend.auto.tfbackend

      - name: Terraform Fmt
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          terraform plan \
            -var-file="environments/${{ matrix.environment }}/terraform.tfvars" \
            -var="environment=${{ matrix.environment }}" \
            -out="tfplan-${{ matrix.environment }}"

      - name: "Notice: forked PR - skip remote plan and upload"
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
        run: |
          echo "This pull request comes from a fork. For security, CI will run 'terraform fmt' and 'terraform validate' but will not perform a remote-backed 'terraform init' or create/upload stateful plans."

      - name: Upload Plan
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: tfplan-${{ matrix.environment }}

      - name: Cleanup backend file
        if: always()
        run: |
          rm -f backend.auto.tfbackend || true
